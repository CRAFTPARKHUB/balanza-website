// Generated by Framer (013b13c)

import { addFonts, addPropertyControls, ControlType, cx, CycleVariantState, getLoadingLazyAtYPosition, Image, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import { useRef } from "react";

const serializationHash = "framer-jrKJb"

const variantClassNames = {hJPBe9JWe: "framer-v-1lg7ngv"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const toResponsiveImage = (value) => {
    if (typeof value === "object" && value !== null && typeof value.src === "string") {
        return value;
    };
    return typeof value === "string" ? {src: value} : undefined;
};


const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const getProps = ({height, id, image, width, ...props}) => { return {...props, o2dxS4U2s: image ?? props.o2dxS4U2s ?? {alt: "", src: "https://framerusercontent.com/images/Yj75uUzBke8UeYiRKxUE2jnj2Y.png"}} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;image?: {src: string; srcSet?: string; alt?: string}; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const fallbackRef = useRef<HTMLElement>(null)

const refBinding = ref ?? fallbackRef

const defaultLayoutId = React.useId()

const { activeLocale, setLocale } = useLocaleInfo()

const componentViewport = useComponentViewport()

const {style, className, layoutId, variant, o2dxS4U2s, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({defaultVariant: "hJPBe9JWe", ref: refBinding, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const sharedStyleClassNames = []

const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)

return (<LayoutGroup id={layoutId ?? defaultLayoutId}><Variants animate={variants} initial={false}><Transition value={transition1}><motion.div {...restProps} {...gestureHandlers} className={cx(scopingClassNames, "framer-1lg7ngv", className, classNames)} data-framer-name={"Default"} layoutDependency={layoutDependency} layoutId={"hJPBe9JWe"} ref={refBinding} style={{backgroundColor: "var(--token-5df573a8-5c6e-4a5b-bca6-248c4c391d54, rgb(255, 255, 255))", borderBottomLeftRadius: 24, borderBottomRightRadius: 24, borderTopLeftRadius: 24, borderTopRightRadius: 24, ...style}}><Image background={{alt: "", fit: "fill", loading: getLoadingLazyAtYPosition(((componentViewport?.y || 0) + (2 + ((((componentViewport?.height || 48) - 4) - 42) / 2)))), pixelHeight: 480, pixelWidth: 480, sizes: "44px", ...toResponsiveImage(o2dxS4U2s)}} className={"framer-1kf99ud"} layoutDependency={layoutDependency} layoutId={"SEXdJMjQC"} style={{borderBottomLeftRadius: 22, borderBottomRightRadius: 22, borderTopLeftRadius: 22, borderTopRightRadius: 22}}/></motion.div></Transition></Variants></LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-jrKJb.framer-11doh81, .framer-jrKJb .framer-11doh81 { display: block; }", ".framer-jrKJb.framer-1lg7ngv { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 2px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }", ".framer-jrKJb .framer-1kf99ud { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 44px); overflow: hidden; position: relative; width: 44px; will-change: var(--framer-will-change-override, transform); }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-jrKJb.framer-1lg7ngv { gap: 0px; } .framer-jrKJb.framer-1lg7ngv > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-jrKJb.framer-1lg7ngv > :first-child { margin-left: 0px; } .framer-jrKJb.framer-1lg7ngv > :last-child { margin-right: 0px; } }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 48
 * @framerIntrinsicWidth 48
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]}}}
 * @framerVariables {"o2dxS4U2s":"image"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramerZMYgSr3fe: React.ComponentType<Props> = withCSS(Component, css, "framer-jrKJb") as typeof Component;
export default FramerZMYgSr3fe;

FramerZMYgSr3fe.displayName = "Profile Photo";

FramerZMYgSr3fe.defaultProps = {height: 48, width: 48};

addPropertyControls(FramerZMYgSr3fe, {o2dxS4U2s: {__defaultAssetReference: "data:framer/asset-reference,Yj75uUzBke8UeYiRKxUE2jnj2Y.png?originalFilename=Person-01.png&preferredSize=auto", __vekterDefault: {alt: "", assetReference: "data:framer/asset-reference,Yj75uUzBke8UeYiRKxUE2jnj2Y.png?originalFilename=Person-01.png&preferredSize=auto"}, title: "Image", type: ControlType.ResponsiveImage}} as any)

addFonts(FramerZMYgSr3fe, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})